version: 2.1

orbs:
  gh: circleci/github-cli@1.0.4

parameters:
  project_name:
    type: string
    default: mqtt-influxdb-gateway
  working_directory:
    type: string
    default: ~/mqtt-influxdb-gateway
  python_version:
    type: string
    default: "3.9.16"
  cache_version:
    type: string
    default: "4"
  git_trunk_branch:
    type: string
    default: "main"
  command_prefix:
    type: string
    default: "poetry run delfino"
  dockerhub_username:
    type: string
    default: "radeklat"

jobs: # A basic unit of work in a run
  test:
    docker:
    - image: cimg/python:<< pipeline.parameters.python_version >>
    environment:
      PIPENV_VENV_IN_PROJECT: "true"
      PYTHONPATH: "src"
    working_directory: << pipeline.parameters.working_directory >>
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install dev libraries
          command: pip install --upgrade pip poetry pre-commit && poetry install --no-ansi --no-root
      - run:
          name: Documentation check
          command: |
            pre-commit run -a settings-doc-markdown
            pre-commit run -a settings-doc-dotenv
      - run:
          name: Format check
          command: << pipeline.parameters.command_prefix >> format --check
      - run:
          name: Type check
          command: << pipeline.parameters.command_prefix >> mypy
      - run:
          name: Linters
          command: << pipeline.parameters.command_prefix >> lint
      - save_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
          paths:
            - ".venv"
            - "~/.cache/pre-commit"
      - run:
          name: Unit tests
          command: << pipeline.parameters.command_prefix >> pytest-unit
      - run:
          name: Integration tests
          command: << pipeline.parameters.command_prefix >> pytest-integration
      - run:
          name: Build coverage report
          command: << pipeline.parameters.command_prefix >> coverage-report
      - run:
          name: Upload coverage reports to Codecov
          command: |
            [[ "${CIRCLE_BRANCH}" == "<< pipeline.parameters.git_trunk_branch >>" ]] && BASE_COMMIT_SHA=$(git rev-parse HEAD~1) || BASE_COMMIT_SHA=$(git merge-base ${CIRCLE_BRANCH} origin/<< pipeline.parameters.git_trunk_branch >>)
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-unit.xml -F total,unit_tests &&
            bash <(curl -s https://codecov.io/bash) -N ${BASE_COMMIT_SHA} -f reports/coverage-integration.xml -F total,integration_tests
      - store_artifacts:
          path: reports/coverage-report
      - store_test_results:
          path: reports

  build_and_push:
    machine:
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-docker-build-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
      - run:
          name: Install and activate required Python version
          command: |
            export VERSION="<< pipeline.parameters.python_version >>"
            if [[ ! -d "/opt/circleci/.pyenv/versions/${VERSION}" ]]; then
              echo "Python ${VERSION} not installed."

              if [[ -z "$(pyenv install --list | grep -q ${VERSION})" ]]; then
                echo "Python ${VERSION} not available. Trying a pyenv update ..."            
                cd /opt/circleci/.pyenv/plugins/python-build/../.. && git checkout master && git pull && cd -
              fi
              pyenv install ${VERSION}
            else
              echo "Python ${VERSION} already installed."
            fi
            pyenv global ${VERSION}
      - run:
          name: Install poetry
          command: curl -sSL https://install.python-poetry.org | python3 -
      - run:
          name: Check if build needed
          command: |
            export PATH="/home/circleci/.local/bin:$PATH"
            export DOCKER_CLI_EXPERIMENTAL=enabled
            IMAGE_VERSION="$(poetry version -s)"
            tag_exists="$(docker manifest inspect << pipeline.parameters.dockerhub_username >>/<< pipeline.parameters.project_name >>:$IMAGE_VERSION >/dev/null 2>&1; echo $?)"
            if [[ $tag_exists -eq 0 ]]; then
              echo "Image tag '$IMAGE_VERSION' already exists in the repository. Skipping job."
              circleci-agent step halt
            else
              echo "Image tag '$IMAGE_VERSION' doesn't exist in the repository. Running build."
            fi
      - run:
          name: Install dev libraries
          command: poetry install --no-ansi --no-root
      - run:
          name: Create and use a new docker build driver
          command: |
            docker buildx create --use
      - run:
          name: Build and push docker image
          command: << pipeline.parameters.command_prefix >> docker-build --push
  release:
    working_directory: << pipeline.parameters.working_directory >>
    docker:
      - image: cimg/python:<< pipeline.parameters.python_version >>
    steps:
      - checkout
      - restore_cache:
          key: << pipeline.parameters.cache_version >>-<< pipeline.parameters.project_name >>-<< pipeline.parameters.python_version >>-{{ checksum "poetry.lock" }}
      - gh/setup
      - run:
          name: Check if current version has been released
          command: |
            VERSION=$(poetry version -s)
            if [[ $(gh release view $VERSION >/dev/null 2>&1; echo $?) -eq 0 ]]; then
              echo "Tag '$VERSION' already exists. Skipping."
              circleci-agent step halt
            fi
      - run:
          name: Create a release
          command: gh release create $(poetry version -s) -F CHANGELOG.md

workflows:
  version: 2
  all_pipelines:
    jobs:
      - test:
          context: mqtt-influxdb-gateway
          name: Tests
      - build_and_push:
          name: Build and push docker image
          context:
            - dockerhub
          requires:
            - Tests
          filters:
            branches:
              only: << pipeline.parameters.git_trunk_branch >>
      - release:
          context:
            - github
          requires:
            - Build and push docker image
          filters:
            branches:
              only: << pipeline.parameters.git_trunk_branch >>